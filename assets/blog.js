!function(e){var t={};function n(o){if(t[o])return t[o].exports;var a=t[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(o,a,function(t){return e[t]}.bind(null,a));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=12)}([function(e,t,n){"use strict";e.exports=n(26)},function(e,t,n){"use strict";e.exports=n(25)},,,function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},,,,,,function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var o=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach(function(e){o[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,s=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var u in n=Object(arguments[l]))a.call(n,u)&&(s[u]=n[u]);if(o){i=o(n);for(var c=0;c<i.length;c++)r.call(n,i[c])&&(s[i[c]]=n[i[c]])}}return s}},,function(e,t,n){"use strict";n.r(t),function(e){var o,a=n(13),r=n.n(a),i=n(14),s=n.n(i),l=n(15),u=n.n(l),c=n(16),d=n.n(c),f=n(17),p=n.n(f),h=n(18),g=n.n(h),m=n(19),b=n.n(m),y=n(20),w=n.n(y);(o=("undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal:n(1)).enterModule)&&o(e);var v={_20170926T231958Z:r.a,_20170927T173758Z:s.a,_20171006T200728Z:u.a,_20171014T223636Z:d.a,_20190414T212625Z:p.a,_20190430T220305:g.a};Object.freeze(v);var k={misc:b.a,music:w.a};Object.freeze(k);var I,j,S={posts:Object.values(v).sort(function(e){return-new Date(e.date)}),pages:Object.values(k).sort(function(e,t){return e.order-t.order})};t.default=S,(I=("undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal:n(1)).default)&&I.register(S,"default","/Users/timsandberg/dev/_old.timmehs.github.io/src/store.js"),(j=("undefined"!=typeof reactHotLoaderGlobal?reactHotLoaderGlobal:n(1)).leaveModule)&&j(e)}.call(this,n(4)(e))},function(e,t){e.exports={title:"Dat Blog Tho: Genesis",tags:["blog","react","server side rendering"],date:"2017-09-26T23:19:58.000Z",header:"https://d1u0z01nzsqzn7.cloudfront.net/images/buddhaz.jpg",markdown:'\n\nI decided to try my hand at building a "jekyll"-like, dynamically generated static website using webpack and React.  Is it overkill?  Maybe (Yes).  Is it proving fun?  Yes.\n\nHere\'s a brief list of the features/goals/challenges that this site represents:\n  * Keep asset size low. (React 16 was released today which minifies to ~32% smaller along with many other features and optimizations)\n  * Parse markdown files into blog posts\n  * Leverage "server side rendering" methods to generate the static site efficiently where reasonable.\n  * Pipe dream of bundling this up into a modest static site builder like jekyll, with\n    * Very little to no scaffolding (eschewing jekyll\'s reliance on tethering yourself to a theme)\n    * Sass, React, and ES6 transpilation.\n    * Post generator that adds a timestamped markdown file to `./posts` which is then parsed into JSX\n  * Probably most importantly, I\'d love to get more stuff out of my brain and into blog posts on a regular basis.\n'}},function(e,t){e.exports={title:"Generating posts",tags:["bash","shell","timestamps"],date:"2017-09-27T17:37:58.000Z",header:"https://d1u0z01nzsqzn7.cloudfront.net/images/buddhaz.jpg",markdown:'\n\nI wrote a shell script.  Since writing .sh is as horrible as it is useful, I deemed it worth the practice.  Here\'s what I came up with:\n\n```bash\n  #!/bin/bash\n\n  # Create the file with timestamp\n  timestamp=$(date -u "+%Y-%m-%dT%H:%M:%SZ")\n  new_post_file="./posts/$timestamp.md"\n  touch $new_post_file\n\n  # Capture first argument (title) and remove from arg list\n  title=$1\n  shift\n\n  # Build tags list:\n  # Set Internal Field Separator to Comma so we can join the remaining args\n  IFS=,\n  join_tags=$*\n\n  cat <<- EOF > $new_post_file\n  title: $title\n  tags: $join_tags\n  date: $timestamp\n  ----\n\n  write content here\n\n  EOF\n\n  nvim $new_post_file\n```\n\nRunning `scripts/post "Generating Posts" bash shell timestamps` gave me the following\n\n```ruby\ntitle: Generating posts\ntags: bash,shell,timestamps\ndate: 2017-09-27T17:37:58Z\n----\n\nwrite content here\n```\n\nThe idea is the javascript will parse the header to pull out pertinent data for building the header (markdown alone wont let me right-align the date, for one).  This takes a page out of jekyll\'s book by having a "header" section with key data points.  The top of the document will be parsed into a POJO, and everything after the `----` will be parsed from markdown to jsx.  And so, a blog post is born.\n'}},function(e,t){e.exports={title:"Webpack Loaders",tags:["webpack","blog","markdown","react"],header:"https://camo.githubusercontent.com/d18f4a7a64244f703efcb322bf298dcb4ca38856/68747470733a2f2f7765627061636b2e6a732e6f72672f6173736574732f69636f6e2d7371756172652d6269672e737667",date:"2017-10-06T20:07:28.000Z",markdown:"\n\nAlright, this'll be my first post really consuming what I've built as a blogging platform. I just generated this markdown file with the title and relevant tags, and I'm off typing.\n\n![alt text](https://d1u0z01nzsqzn7.cloudfront.net/images/10-06-2017-header.png \"Using the `yarn post` post generator\")\n\nBetween now and the last post I did a whole lot of battling with how I was going to build up the site, WITH the blogposts in their unusual format, and including them in the webpack bundle.  Here's where I landed.\n\n### Early days\nOriginally I had scripts to parse all files under my `/posts` directory and build `/assets/blog-manifest.json` which consisted of something like:\n\n```javascript\nmodule.exports = [..JSONified blog post data...]\n```\n\nI had to call this script explicitly with `yarn build` which string this script together with webpack, something like `./bin/build-blog; webpack`.\nMy Blog component could then import this data, which was in a sensible enough form to map into a list of Post components to render the blog.\n\n### Leveraging webpack\nThe first step I took in the right direction was to extract that script to be a webpack plugin called `BlogBuilderPlugin`, which automatically built the `blog-manifest.json` file when the compilation was finished.  This ensured at least that whenever webpack rebuilt the bundle, there would be a fresh `blog-manifest.json` for the Blog to consume.  However, I wanted the blog to be rebuilt and reloaded as I was typing up posts.\n\n> The plugin wasn't quite what I needed, however.\n\nWhat I needed was to apply my special parsing of my post files, splitting apart `title`, `date`, `tags`, `markdown` into consumable modules.  But I needed to dynamically import ALL post files in order to render, sort, filter, etc.  I can't be expected to add an import statement for every blog post.  I'm going to be writing waaaay too many to be bothered with that (smirk).\n\nAll I needed to do in the end was add a custom `post-loader` with a rule to apply it to all .md files.  I should probably change it to .post since its not technically an md file.\n\nHere's the loader:\n```\nvar yaml = require('js-yaml')\n\n// Post Loader\n// Convert post.md file to object { date, markdown, title, tags }\nfunction parsePost(rawString) {\n  const splitContent = rawString.split(\"----\\n\")\n  const data = yaml.safeLoad(splitContent[0])\n  const tags = Object.assign(...data.tags.split(',').map(k => ({ [k]: true })))\n\n  return {\n    ...data,\n    tags,\n    markdown: splitContent.slice(1).join('')\n  }\n}\n\nmodule.exports = function(source) {\n  return \"module.exports = \" + JSON.stringify(parsePost(source));\n};\n```\n\nAnd included in `webpack.config.js`:\n```javascript\n  ...\n    module: {\n      rules: [\n        {\n          test: /\\.md$/,\n          use: [\n            \"post-loader\"\n          ]\n        },\n    ...\n```\n\nThis loader will run for any .md file imported by code in my load path (through index.js).  The problem remains, how to load up ALL of these files at once.  Turns out there are dozens of \"glob\"ing packages on NPM to enable statements like this:\n\n```\n\nimport * as blogPosts from '../../posts/*.md'\n\n```\n\nI happened to use a babel plugin called [babel-plugin-import-glob](https://github.com/novemberborn/babel-plugin-import-glob), but there are many others.\n\nThats probably not a coherent narrative, but the TL;DR is:\n\nI have a reasonably clean platform, all handled through ES6 modules and webpack, to dynamically generate and render blog posts.\n\nNext up:\n\n* Blog index and filtering using dates and tags.\n"}},function(e,t){e.exports={title:"Gitalong: A better Github feed",tags:["express","webpack","react","github"],date:"2017-10-14T22:36:36.000Z",header:"https://d1u0z01nzsqzn7.cloudfront.net/images/octocat.svg",markdown:"\n\nTwo years ago I started kicking around a little project called Gitalong. A user could log in and see a feed of Github repos from all the people they were connected with (following/followed).  This could be sorted by last pushed-to, or the number of stars it had.\n\nIt could also be filtered by language, and it turned out this was a pretty neat way to get a view of what was happening in your Github social circle.  It let you see what your peers were actually working on and pushing to, at least publically.  Cool!\n\nThe Rails app that drove this was not that cool however.  By that I mean it was an elaborate cluster****.  The data flow went something like this:\n\n- User logs in, authenticating with their Github profile.\n- Redirect to '/', so the server needs to build the activity feed:\n  - Get the list of \"following\" users from Github\n  - Get the list of \"followers\" users from Github\n  - For each user in this combined list, get the first page of their Repos\n  - Serialize the list of users and the list of repos and put in a JSON response\n\nEven for a user like myself who only modestly consumes Github's social features (I follow about ~20 people, and am followed by mostly those folks, so grand total is about 25), this meant a sizeable number of requests.\n\nWaiting for dozens of requests to process singlefile (in ruby) wasn't really an option, so I used the following strategies:\n- Sidekiq jobs to wrap the API and DB calls as a way to get some concurrency/async functionality to process the requests and db updates.\n- For fun, I used Rails 5's new ActionCable feature to 'livestream' the data to the client as the data came back from Github.  It was rad watching React components get data from a websocket connection, and fairly easy to set up.  Excited to try this out again for a DIFFERENT application however.\n\nIn this way, eventually, a feed was constructed and the user could then filter it.  I never polished up and finished the project.  When I walked away from it there were plenty of bugs and UI issues that needed addressing, but it just felt like it was the wrong tech stack for it.  For an application with a specific, single purpose, it just felt wrong to have an entire Rails app spun up, complete with websocket server, psql db, and redis job queue.\n\nBut I didn't forget how cool it was to browse Github data like that; to see a stream of what folks I knew were up to in their coding endeavors (on Github).  So recently I decided to reboot the project in Express as an excuse to dive a bit deeper into Nodejs (even doing some Nodejs units on Pluralsight.com).\n\nSo far its been extremely rewarding and exciting to see the kinds of things a node backend really kicks ass at.  It also feels great to step out of Rails' convention-over-configuration and have to think critically about organizating an application.  I'm sure a number of blogposts about my learnings will follow before the project is done, possible topics:\n* ### Organizing an Express/React app in the age of Webpack\n* ### \"Productivity: function first, design later\"  Or, \"fighting against every impulse in my soul\".\n* ### Wrangling a ton of async requests with Promise.all\n"}},function(e,t){e.exports={title:"BuddhaBlog",tags:["blog","open-source","framework"],date:"2019-04-14T21:26:25.000Z",header:"https://d1u0z01nzsqzn7.cloudfront.net/images/forest_path.jpg",markdown:"\n\nWell its been almost two years since my last post and there's just too much to cover, so I'll gloss over some big news: I've ended an amazing 4-year run at [Bugcrowd](https://bugcrowd.com). I joined as a Software Engineer in 2015, and ended 4 years and 25 days later as a Staff Engineer. I loved every minute of it and can't overstate how much I grew and learned as an engineer, a collaborator, a student, and a mentor.\n\nMy reasons for leaving? It was time to strike a better balance between music production/composition and development. I hope to write more on my music production process and adventures in Logic Pro X, film composition, etc. But that will have to wait-- I came here to announce BuddhaBlog.\n\n\n> ###*<a href=\"https://github.com/Timmehs/buddhablog\" target=\"_blank\">BuddhaBlog:</a> a static blog generator in Node and React*\n\nI've decided to genericize the code that generates this blog into its own package, and build up tooling and other improvements around it. It's a great excuse to explore SEO in single page apps, and architect my own funky solution for a convenient, lightweight static blog generator. Not to mention getting more familiar with actually publishing packages.\n\nI've always lost patience messing around with Jekyll.  While I do want to continue to streamline layout and styling of BuddhaBlog, I want to make sure the nuts and bolts are exposed for tweaking, but clean.  Jekyll's markdown and transpilation process just always seemed a little opaque. Like I said though, I'll admit I never gave it much of a shot. \n\nBut my little script for generating a post already has BuddhaBlog feeling more instantly gratifying as something you can just crack open and start writing.\n\nAnother nice thing I've either forgotten about or just realized, I can see a live preview of this post as I type just by running the site in dev mode alongside it. It updates whenever I <kbd>cmd</kbd>+<kbd>s</kbd>. ezpz."}},function(e,t){e.exports={title:"The Dharma of BuddhaBlog",tags:["reinventing-the-wheel","static-site","react","gatsby","npm"],date:"2019-04-30T22:03:05.000Z",author:"Tim Sandberg",header:"https://d1u0z01nzsqzn7.cloudfront.net/images/buddhaz.jpg",markdown:"\n\nSo yeah, BuddhaBlog is reinventing the wheel kind of hard. There are a number of React-driven static site generators  (like [gatsby](https://www.gatsbyjs.org/)), but screw it-- I've had a lot of fun putting this thing together but it has gone ALL OVER THE PLACE. Lemme try and summarize the ground I've covered:\n\n - Refresh on publishing NPM packages, bumping versions, etc.\n - Coordinating two interdependent repositories using git submodules (for a while I had buddhablog-template as a submodule under buddhablog-cli).\n - Making a portable build configuration with webpack/babel in order to encapsulate all building responsibilities to the CLI (got very close but hit a wall and here we are).\n - Search Engine Optimization - TLDR of this is I realized I'd need to convert the different \"virtual pages\" served by react router to actual HTML documents to have proper SEO. For this I used a number of tools:\n  - [react-helmet](https://github.com/nfl/react-helmet): \"A document head manager for React\" (meta tags/title, etc). Made by the NFL, lol.\n  - [react-snap](https://github.com/stereobooster/react-snap): static prerending for single page apps. From the README: *Pre-renders a web app into static HTML. Uses Headless Chrome to crawl all available links starting from the root. Heavily inspired by prep and react-snapshot, but written from scratch. Uses best practices to get the best loading performance.*\n  - [gh-pages](https://github.com/tschaub/gh-pages): a package for deploying a specific build folder to your gh-page repo, allows you to specify branch name (must be `master` for personal gh page like timmehs.github.io), and a host of other options.\n\nThere's a lot more, I think, but it's already a crazy wall of text. The implementation has gone all over the place and I've left it in a sort of frankenstein state so I could pull in what works to this site and not feel blocked by the state of BuddhaBlog.\n\nI still very much like the simple usage and purpose-built nature of it, not to mention being very familiar with everything happening under the hood to transpile the posts (and pages) markdown, generate dynamic SEO, generate static HTML.\n\nIt seems hilarious at the end of the day that all of this is just to generate static HTML, which could probably be done with about half the code in HTML and CSS, and just using the markdown parser for the blog posts.\n\nMy plan is to take a break from it, accomplish some short-term music-related goals, and come back to it and see what I can pare down, simplify, and fix.  Whew."}},function(e,t){e.exports={title:"Misc",order:2,slug:"misc",markdown:"\n\n[Timmehs (Tim Sandberg) · GitHub](https://github.com/Timmehs)\n\n[LinkedIn](https://www.linkedin.com/in/timsandberg/)"}},function(e,t){e.exports={title:"Music",order:1,slug:"music",markdown:"\n\n[Murder Squad](http://www.imdb.com/title/tt1675747) a comedy webseries (2009)\n\n[Back to Abstraction (2016) - IMDb](http://www.imdb.com/title/tt6059322) a short film by artist Stacy Elaine Descheaux, directed by Matthew Quezada. Soundtrack by yours truly.\n\n[God's Cellar (2017) - IMDb](http://www.imdb.com/title/tt7401608) (music for credits) Horror short film.\n\n[The Fucking Buckaroos](http://thefuckingbuckaroos.bandcamp.com/) - San Francisco bluegrass punk\n\n[Street Justice](http://streetjusticesf.bandcamp.com/) SF hardcore punk\n\n[Tim Sandberg](http://timsandberg.bandcamp.com/) musical doodles\n\n[Hay Babes](http://haybabes.bandcamp.com/) Americana goodness\n"}},,,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,a=(o=n(0))&&"object"==typeof o&&"default"in o?o.default:o;t.AppContainer=function(e){return a.Children.only(e.children)},t.hot=function(){return function(e){return e}},t.areComponentsEqual=function(e,t){return e===t},t.setConfig=function(){},t.cold=function(e){return e},t.configureComponent=function(){}},function(e,t,n){"use strict";
/** @license React v16.8.6
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var o=n(10),a="function"==typeof Symbol&&Symbol.for,r=a?Symbol.for("react.element"):60103,i=a?Symbol.for("react.portal"):60106,s=a?Symbol.for("react.fragment"):60107,l=a?Symbol.for("react.strict_mode"):60108,u=a?Symbol.for("react.profiler"):60114,c=a?Symbol.for("react.provider"):60109,d=a?Symbol.for("react.context"):60110,f=a?Symbol.for("react.concurrent_mode"):60111,p=a?Symbol.for("react.forward_ref"):60112,h=a?Symbol.for("react.suspense"):60113,g=a?Symbol.for("react.memo"):60115,m=a?Symbol.for("react.lazy"):60116,b="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);!function(e,t,n,o,a,r,i,s){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,a,r,i,s],u=0;(e=Error(t.replace(/%s/g,function(){return l[u++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var w={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function k(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||w}function I(){}function j(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||w}k.prototype.isReactComponent={},k.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&y("85"),this.updater.enqueueSetState(this,e,t,"setState")},k.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},I.prototype=k.prototype;var S=j.prototype=new I;S.constructor=j,o(S,k.prototype),S.isPureReactComponent=!0;var x={current:null},_={current:null},O=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function P(e,t,n){var o=void 0,a={},i=null,s=null;if(null!=t)for(o in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(i=""+t.key),t)O.call(t,o)&&!T.hasOwnProperty(o)&&(a[o]=t[o]);var l=arguments.length-2;if(1===l)a.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];a.children=u}if(e&&e.defaultProps)for(o in l=e.defaultProps)void 0===a[o]&&(a[o]=l[o]);return{$$typeof:r,type:e,key:i,ref:s,props:a,_owner:_.current}}function z(e){return"object"==typeof e&&null!==e&&e.$$typeof===r}var E=/\/+/g,C=[];function R(e,t,n,o){if(C.length){var a=C.pop();return a.result=e,a.keyPrefix=t,a.func=n,a.context=o,a.count=0,a}return{result:e,keyPrefix:t,func:n,context:o,count:0}}function B(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>C.length&&C.push(e)}function L(e,t,n){return null==e?0:function e(t,n,o,a){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var l=!1;if(null===t)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case r:case i:l=!0}}if(l)return o(a,t,""===n?"."+M(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var u=0;u<t.length;u++){var c=n+M(s=t[u],u);l+=e(s,c,o,a)}else if(c=null===t||"object"!=typeof t?null:"function"==typeof(c=b&&t[b]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),u=0;!(s=t.next()).done;)l+=e(s=s.value,c=n+M(s,u++),o,a);else"object"===s&&y("31","[object Object]"==(o=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":o,"");return l}(e,"",t,n)}function M(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function $(e,t){e.func.call(e.context,t,e.count++)}function A(e,t,n){var o=e.result,a=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?G(e,o,n,function(e){return e}):null!=e&&(z(e)&&(e=function(e,t){return{$$typeof:r,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,a+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(E,"$&/")+"/")+n)),o.push(e))}function G(e,t,n,o,a){var r="";null!=n&&(r=(""+n).replace(E,"$&/")+"/"),L(e,A,t=R(t,r,o,a)),B(t)}function H(){var e=x.current;return null===e&&y("321"),e}var q={Children:{map:function(e,t,n){if(null==e)return e;var o=[];return G(e,o,null,t,n),o},forEach:function(e,t,n){if(null==e)return e;L(e,$,t=R(null,null,t,n)),B(t)},count:function(e){return L(e,function(){return null},null)},toArray:function(e){var t=[];return G(e,t,null,function(e){return e}),t},only:function(e){return z(e)||y("143"),e}},createRef:function(){return{current:null}},Component:k,PureComponent:j,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:g,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return H().useCallback(e,t)},useContext:function(e,t){return H().useContext(e,t)},useEffect:function(e,t){return H().useEffect(e,t)},useImperativeHandle:function(e,t,n){return H().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return H().useLayoutEffect(e,t)},useMemo:function(e,t){return H().useMemo(e,t)},useReducer:function(e,t,n){return H().useReducer(e,t,n)},useRef:function(e){return H().useRef(e)},useState:function(e){return H().useState(e)},Fragment:s,StrictMode:l,Suspense:h,createElement:P,cloneElement:function(e,t,n){null==e&&y("267",e);var a=void 0,i=o({},e.props),s=e.key,l=e.ref,u=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,u=_.current),void 0!==t.key&&(s=""+t.key);var c=void 0;for(a in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)O.call(t,a)&&!T.hasOwnProperty(a)&&(i[a]=void 0===t[a]&&void 0!==c?c[a]:t[a])}if(1===(a=arguments.length-2))i.children=n;else if(1<a){c=Array(a);for(var d=0;d<a;d++)c[d]=arguments[d+2];i.children=c}return{$$typeof:r,type:e.type,key:s,ref:l,props:i,_owner:u}},createFactory:function(e){var t=P.bind(null,e);return t.type=e,t},isValidElement:z,version:"16.8.6",unstable_ConcurrentMode:f,unstable_Profiler:u,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:x,ReactCurrentOwner:_,assign:o}},F={default:q},N=F&&q||F;e.exports=N.default||N}]);